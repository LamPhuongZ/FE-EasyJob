import {
  applyForJobAPI,
  Content,
  setHasApplied,
} from "../../redux/reducers/jobReducer";
import Button from "../button/Button";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/swiper-bundle.css";
import "swiper/css";
import "swiper/css/pagination";
import { Navigation, Pagination } from "swiper/modules";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import { DispatchType, RootState } from "../../redux/configStore";
import { useDispatch, useSelector } from "react-redux";
import { useEffect } from "react";
import { getCookie } from "../../utils/utilMethod";
import { ACCESS_TOKEN } from "../../utils/config";
import { toast } from "react-toastify";
import { useRole } from "../../hooks/useRole";
import { UserRole } from "../../enums/role.enum";

type Props = {
  item: Content;
};

export default function JobCardDetail({ item }: Props) {
  const { jobId } = useParams();
  const { sub, role } = useRole();
  const navigate = useNavigate();
  const location = useLocation(); // L·∫•y th√¥ng tin v·ªã tr√≠ hi·ªán t·∫°i
  const dispatch: DispatchType = useDispatch();
  const token = getCookie(ACCESS_TOKEN);

  // Ki·ªÉm tra ph√¢n quy·ªÅn
  const isApplier = role === UserRole.ROLE_APPLIER;
  const isEmployer = role === UserRole.ROLE_EMPLOYER;
  console.log("üöÄ ~ JobCardDetail ~ role:", role);

  const { hasApplied, isLoading } = useSelector(
    (state: RootState) => state.jobReducer
  );

  useEffect(() => {
    if (token && sub) {
      // Ki·ªÉm tra tr·∫°ng th√°i ·ª©ng tuy·ªÉn t·ª´ localStorage v√† c·∫≠p nh·∫≠t v√†o Redux
      const hasApplied = localStorage.getItem(`hasApplied_${jobId}_${sub}`);

      if (hasApplied === "true") {
        dispatch(setHasApplied(true)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√†o Redux
      } else {
        dispatch(setHasApplied(false)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√†o Redux
      }
    }
  }, [jobId, sub, dispatch, token]);

  const handleApply = async (jobId: number) => {
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p hay ch∆∞a
    if (!token) {
      toast.info("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë∆∞·ª£c ·ª©ng tuy·ªÉn c√¥ng vi·ªác n√†y!!");
      return navigate("/login", { state: { from: location } });
    }

    if (!isApplier) {
      return toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ·ª©ng tuy·ªÉn v√†o c√¥ng vi·ªác n√†y.");
    }

    // G·ªçi API ·ª©ng tuy·ªÉn v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi ·ª©ng tuy·ªÉn th√†nh c√¥ng
    await dispatch(applyForJobAPI(jobId));

    localStorage.setItem(`hasApplied_${jobId}_${sub}`, "true"); // L∆∞u tr·∫°ng th√°i ·ª©ng tuy·ªÉn v√†o localStorage
    dispatch(setHasApplied(true)); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ·ª©ng tuy·ªÉn trong Redux
  };

  return (
    <div className="bg-white rounded-2xl shadow-md py-12 px-7 small-tablet:w-full">
      <div className="sticky top-0 bg-white z-10">
        <div className="flex gap-16 small-tablet:gap-8 small-tablet:justify-between">
          <h1 className="text-[30px] font-semibold small-tablet:text-xl">
            {item.title}
          </h1>
        </div>
        <Button
          title={!hasApplied ? "·ª®ng Tuy·ªÉn" : "ƒê√£ ·ª®ng Tuy·ªÉn"}
          className="w-full h-16 mt-9"
          onClick={() => handleApply(Number(jobId))}
          disabled={hasApplied || isLoading || isEmployer} // Disable n√∫t n·∫øu ƒë√£ ·ª©ng tuy·ªÉn, ƒëang loading ho·∫∑c l√† nh√† tuy·ªÉn d·ª•ng
        />
        <div className="border border-solid mt-4"></div>
      </div>
        <div className="flex flex-col gap-7 mt-7">
          <div className="flex justify-between">
            <div className="flex items-center gap-x-2 small-tablet:text-sm">
              <h1 className="font-medium ">Lo·∫°i c√¥ng vi·ªác:</h1>
              <div className="px-4 py-2 rounded-[10px] border border-solid flex">
                <p className="font-medium text-sm">{item.jobType.name}</p>
              </div>
            </div>
            <div className="flex items-center gap-x-2 small-tablet:text-sm">
              <h1 className="font-medium ">M·ª©c ph√≠ d·ªãch v·ª•:</h1>
              <div className="px-4 py-2 rounded-[10px] border border-solid flex">
                <p className="font-medium text-xl">
                  {item.jobType.minPrice} - {item.jobType.maxPrice} / Gi·ªù
                </p>
              </div>
            </div>
          </div>
          <div className="flex gap-x-2 items-center small-tablet:text-sm small-tablet:grid small-tablet:grid-cols-1 small-tablet:gap-y-2">
            <h1 className="font-medium">ƒêƒÉng:</h1>
            <div className="px-4 py-2 rounded-[10px] border border-solid small-tablet:text-center">
              <p className="font-medium">
                {new Date(item.postedDate)
                  .toLocaleDateString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                  })
                  .replace(/\//g, "-")}{" "}
                -{" "}
                {new Date(item.postedDate).toLocaleTimeString("vi-VN", {
                  hour: "numeric",
                  minute: "2-digit",
                  hour12: false, // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 24 gi·ªù
                })}
              </p>
            </div>
            <div className="border border-solid border-black w-16 mx-11 small-tablet:hidden"></div>
            <h1 className="font-medium">H·∫°n ·ª©ng tuy·ªÉn:</h1>
            <div className="px-4 py-2 rounded-[10px] border border-solid small-tablet:text-center">
              <p className="font-medium">
                {new Date(item.endDate)
                  .toLocaleDateString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                  })
                  .replace(/\//g, "-")}{" "}
                -{" "}
                {new Date(item.endDate).toLocaleTimeString("vi-VN", {
                  hour: "numeric",
                  minute: "2-digit",
                  hour12: false, // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 24 gi·ªù
                })}
              </p>
            </div>
          </div>
          <div className="border border-solid"></div>
        </div>
        <div className="my-7">
          <h1 className="mb-2 font-medium small-tablet:text-sm">
            ƒê·ªãa ch·ªâ l√†m vi·ªác:
          </h1>
          <div className="py-[10px] flex items-center justify-center border border-solid rounded-[20px] small-tablet:py-[10px] small-tablet:rounded-[10px]">
            <p className="font-medium text-lg small-tablet:text-sm">
              {item.address}
            </p>
          </div>
        </div>
        <div className="flex justify-between my-7 small-tablet:grid small-tablet:grid-cols-1 small-tablet:gap-7">
          <div className="w-[350px] large-desktop:w-[350px] small-tablet:w-full">
            <h1 className="mb-2 font-medium small-tablet:text-sm">
              S·ªë ƒëi·ªán tho·∫°i:
            </h1>
            <div className="py-[10px] flex items-center justify-center border border-solid rounded-[20px] small-tablet:py-[10px] small-tablet:rounded-[10px]">
              <p className="text-lg font-medium  small-tablet:text-sm">
                {item.phone}
              </p>
            </div>
          </div>
          <div className="w-[350px] large-desktop:w-[350px] small-tablet:w-full">
            <h1 className=" mb-2 font-medium small-tablet:text-sm">
              Ng∆∞·ªùi li√™n h·ªá:
            </h1>
            <div className="py-[10px] flex items-center justify-center border border-solid rounded-[20px] small-tablet:py-[10px] small-tablet:rounded-[10px]">
              <p className="text-lg font-medium  small-tablet:text-sm">
                {item.contactPerson}
              </p>
            </div>
          </div>
        </div>
        <div className="flex justify-between my-10 small-tablet:grid small-tablet:grid-cols-1 small-tablet:gap-7">
          <div className="w-[350px] large-desktop:w-[350px] small-tablet:w-full">
            <h1 className="mb-2 font-medium small-tablet:text-sm">
              Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác:
            </h1>
            <div className="py-[10px] flex items-center justify-center border border-solid rounded-[20px] small-tablet:py-[10px] small-tablet:rounded-[10px]">
              <p className="text-lg font-medium  small-tablet:text-sm">
                {new Date(item.startDate).toLocaleDateString("vi-VN")}
              </p>
            </div>
          </div>
          <div className="w-[350px] large-desktop:w-[350px] small-tablet:w-full">
            <h1 className="mb-2 font-medium small-tablet:text-sm">
              Th·ªùi gian l√†m vi·ªác (ƒê∆°n v·ªã: <strong>Gi·ªù</strong>):
            </h1>
            <div className="py-[10px] flex items-center justify-center border border-solid rounded-[20px] small-tablet:py-[10px] small-tablet:rounded-[10px]">
              <p className="text-lg font-medium  small-tablet:text-sm">
                {item.duration / 60}
              </p>
            </div>
          </div>
        </div>
        <div className="border border-solid"></div>
        <div className="mt-[30px]">
          {item.images && item.images.length > 0 ? (
            <Swiper
              navigation={{
                nextEl: ".swiper-button-next",
                prevEl: ".swiper-button-prev",
              }}
              spaceBetween={10}
              slidesPerView={1}
              pagination={{
                dynamicBullets: true,
              }}
              modules={[Pagination, Navigation]}
            >
              {item.images.slice(0, 4).map((image, index) => (
                <SwiperSlide key={index}>
                  <div className="min-w-[80%] h-[400px] 2xl:w-full small-tablet:min-w-[300px] small-tablet:h-[200px] mb-10">
                    <img
                      src={image.url || "https://via.placeholder.com/350"}
                      alt={`Image ${index + 1}`}
                      className="w-full h-full rounded-[20px] object-cover"
                      loading="lazy"
                    />
                  </div>
                </SwiperSlide>
              ))}
              <div className="swiper-button-next"></div>
              <div className="swiper-button-prev"></div>
            </Swiper>
          ) : (
            <p className="mb-10">Kh√¥ng t·ªìn t·∫°i h√¨nh ·∫£nh</p>
          )}
          <div>
            <h1 className="text-[20px] font-semibold mb-2 small-tablet:text-sm">
              M√¥ t·∫£
            </h1>
            <div className="border border-solid rounded-[20px] px-[26px] py-[18px] h-[170px] small-tablet:px-[10px] small-tablet:py-[10px]">
              <p className=" font-medium text-[#91929E] small-tablet:text-sm">
                {item.description}
              </p>
            </div>
          </div>
        </div>
      </div>
  );
}
